教程: http://www.runoob.com/linux/nginx-install-setup.html
安装所需模块:
  gzip模块需要zlib库
  rewrite模块需要pcre库
  ssl功能需要openssl库
下载安装: 
  安装编译工具及库文件: yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel
  安装PCRE: 
    wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz
    mv pcre* /usr/local/src
    cd /usr/local/src
    tar zxvf pcre-8.35.tar.gz
    rm pcre-8.35.tar.gz
    cd pcre-8.35
    ./configure
    make && make install
    pcre-config --version
  安装nginx：
    cd /
    wget http://nginx.org/download/nginx-1.12.0.tar.gz
    mv nginx* /usr/local/src
    rm nginx-1.6.2.tar.gz
    cd /usr/local/src
    tar zxvf nginx-1.6.2.tar.gz
    cd nginx-1.6.2
    ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35
    make
    make install
    /usr/local/webserver/nginx/sbin/nginx -v
 
启动nginx:  
  vim /etc/profile
    export PATH=/usr/local/webserver/nginx/sbin:$PATH #添加PATH路径，文件最后一行添加
  source /etc/profile
  检查配置文件:nginx -t
  启动: nginx||nginx -c conf\my.conf
  停止: nginx -s stop
  重新启动: nginx -s reopen
  重新载入配置文件: nginx -s reload

  windows下: 
  cd c:users/administrator/nginx
  ./nginx -c conf/my.conf
    

传文件:
  pscp -P 29487 -r D:\demo\blog\ root@138.128.207.165:/usr/www/blog/
  pscp -P 29487 -r D:\demo\blog\admin\dist root@138.128.207.165:/usr/www/blog/admin/
  pscp -P 29487 -r D:\demo\blog\front\static\ root@138.128.207.165:/usr/www/blog/front/static/

打开最大文件数: ulimit -n 65536

配置: 查看nginx-conf.txt

location的写法:
  =: 精确匹配,如A只匹配根目录结尾的请求，后面不能带任何字符串
  ^~: uri以某常规字符串开头，不是正则匹配
  ~: 区分大小写的正则匹配;
  ~*: 开头表示不区分大小写的正则匹配
  /: 通用匹配, 如果没有其它匹配,任何请求都会匹配到

  location  = / { # 精确匹配 / ，主机名后面不能带任何字符串
    [ configuration A ] 
  }
  location  / {
    # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求
    # 但是正则和最长字符串会优先匹配
    [ configuration B ] 
  }
  location /documents/ {
    # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索
    # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条
    [ configuration C ] 
  }
  location ~ /documents/Abc {
    # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索
    # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条
    [ configuration CC ] 
  }
  location ^~ /images/ {
    # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。
    [ configuration D ] 
  }
  location ~* \.(gif|jpg|jpeg)$ {
    # 匹配所有以 gif,jpg或jpeg 结尾的请求
    # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则
    [ configuration E ] 
  }
  location /images/ {
    # 字符匹配到 /images/，继续往下，会发现 ^~ 存在
    [ configuration F ] 
  }
  location /images/abc {
    # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在
    # F与G的放置顺序是没有关系的
    [ configuration G ] 
  }
  location ~ /images/abc/ {
    # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用
      [ configuration H ] 
  }
  location ~* /js/.*/\.js

// location实际使用建议：
  #直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。
  #这里是直接转发给后端应用服务器了，也可以是一个静态首页
  # 第一个必选规则
  location = / {
      proxy_pass http://tomcat:8080/index
  }
  # 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项
  # 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用
  location ^~ /static/ {
      root /webroot/static/;
  }
  location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ {
      root /webroot/res/;
  }
  #第三个规则就是通用规则，用来转发动态请求到后端应用服务器
  #非静态文件请求就默认是动态请求，自己根据实际把握
  #毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了
  location / {
      proxy_pass http://tomcat:8080/
  }

window使用nginx
安装: 官网下载(http://nginx.org/en/download.html)，解压后，./nginx就能启动
问题1: /nginx.pid failed  命令: ./nginx -c ./conf/nginx.conf

杀死所有跟nginx.exe有关的进程
taskkill /fi "imagename eq nginx.exe" /F