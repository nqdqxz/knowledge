作用: 针对比较大的、严谨的项目搭建的vue+webpack脚手架
教程: https://loulanyijian.github.io/vue-cli-doc-Chinese/
构建项目: 
  npm install -g vue-cli
  vue init webpack-simple hello-vue
  cd hello-vue
  yarn
  npm run dev

项目架构
  build/   #webpack 配置文件
  config/  #项目核心配置          
    index.js               
  src/
    main.js      # 程序入口文件
    App.vue      # 程序入口vue组件
    components/  # 组件
    assets/      # 模块资源 (会被webpack处理)
  static/   # 纯静态资源 (直接拷贝到dist/static/里)
  test/
    unit/           # 单元测试
      specs/        # 测试规范
      index.js      # 测试入口文件
      karma.conf.js # 测试运行配置文件
    e2e/                  # 端到端测试
      specs/              # 测试规范
      custom-assertions/  # 端到端测试自定义断言
      runner.js           # 运行测试的脚本
      nightwatch.conf.js  # 运行测试的配置文件
  .babelrc      # babel 配置文件
  .editorconfig # 编辑配置文件
  .eslintrc.js  # eslint 配置文件
  index.html    # index.html 入口模板文件
  package.json  # 运行的脚本与相关依赖

构建命令: 
npm run dev: 启动Node.js本地开发服务器
  Webpack + vue-loader 来处理Vue单文件组件
  状态支持热更新,支持浮层显示编译错误
  保存时通过ESLint做语法检测
  可开启Source maps

npm run build: 构建生产环境的资源
  通过UglifyJS压缩JS文件，通过html-minifier压缩html文件
  通过cssnano，提取出所有组件内的css文件，合并压缩到单独文件
  静态资源编译成哈希值版本，index.html会自动插入编译后资源文件的url
  
npm run unit
  通过Karma，在PhantomJS运行单元测试
  测试文件支持ES2015
  支持所有webpack loader

npm run e2e
  通过Nightwatch运行端到端测试
  在多个浏览器中并行运行测试
  通过盒子里的一个命令工作
  自动处理 Selenium 和 chromedriver 依赖
  自动创建 Selenium 服务器
